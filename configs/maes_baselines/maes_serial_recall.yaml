# Problem parameters:
problem_train:
    name: &name maes_baselines/serial_recall_cl
    # Size of generated input: [batch_size x sequence_length x number of control + data bits].
    control_bits: &cbits 4
    data_bits: &dbits 8
    batch_size: &bs 64
    #randomize_control_lines: True
    # Parameters denoting min and max lengths.
    min_sequence_length: 3
    max_sequence_length: 20
    #Curriculum learning - optional.
    curriculum_learning:
        interval: 500
        initial_max_sequence_length: 5
    # Optional parameter, its presence results in clipping gradient to a range (-gradient_clipping, gradient_clipping)
    gradient_clipping: 10
    bias: 0.5
    #cuda: True

# Problem parameters:
problem_validation:
    name: *name
    # Size of generated input: [batch_size x sequence_length x number of control + data bits].
    control_bits: *cbits
    data_bits: *dbits
    batch_size: 64
    # Parameters denoting min and max lengths.
    min_sequence_length: 21
    max_sequence_length: 21
    bias: 0.5

# Problem parameters:
problem_test:
    name: *name
    # Size of generated input: [batch_size x sequence_length x number of control + data bits].
    control_bits: *cbits
    data_bits: *dbits
    batch_size: 64
    # Parameters denoting min and max lengths.
    min_sequence_length: 100
    max_sequence_length: 100
    bias: 0.5

    
# optimizer parameters:
optimizer:
    # Exact name of the pytorch optimizer function
    name: Adam
    # Function arguments of the optimizer, by name
    lr: 0.01

# settings parameters
settings:
    length_loss: 10
    loss_stop: 1.0e-5
    max_episodes: 100000
    validation_stopping: True
    seed_numpy: -1
    seed_torch: -1
