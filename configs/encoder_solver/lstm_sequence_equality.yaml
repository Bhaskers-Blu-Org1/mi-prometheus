# Problem parameters:
problem_train:
    name: &name equality
    # Size of generated input: [batch_size x sequence_length x number of control + data bits].
    control_bits: &cbits 3
    data_bits: &dbits 8
    output_bits: &obits 1
    batch_size: &bs 64
    # Parameters denoting min and max lengths.
    min_sequence_length: 1
    max_sequence_length: 20
    #Curriculum learning - optional.
    curriculum_learning:
        interval: 2000
        initial_max_sequence_length: 4
    # Optional parameter, its presence results in clipping gradient to a range (-gradient_clipping, gradient_clipping)
    gradient_clipping: 10
    bias: 0.5
    cuda: True

# Problem parameters:
problem_validation:
    name: *name
    # Size of generated input: [batch_size x sequence_length x number of control + data bits].
    control_bits: *cbits
    data_bits: *dbits 
    output_bits: *obits
    batch_size: 64
    # Parameters denoting min and max lengths.
    min_sequence_length: 21
    max_sequence_length: 21
    bias: 0.5

# Problem parameters:
problem_test:
    name: *name
    # Size of generated input: [batch_size x sequence_length x number of control + data bits].
    control_bits: *cbits
    data_bits: *dbits 
    output_bits: *obits
    batch_size: 64
    # Parameters denoting min and max lengths.
    min_sequence_length: 1000
    max_sequence_length: 1000
    bias: 0.5

# Model parameters:
model:
    name: lstm
    # Input bits = [control_bits, data_bits]
    # Output bits = [1]
    control_bits: *cbits
    data_bits: *dbits 
    output_bits: *obits
    # Controller hidden state.
    hidden_state_dim: 256
    num_layers: 1
    
# optimizer parameters:
optimizer:
    # Exact name of the pytorch optimizer function
    name: Adam
    # Function arguments of the optimizer, by name
    lr: 0.01

# settings parameters
settings:
    # masked output and target
    use_mask: True
    length_loss: 10
    loss_stop: 1.0e-5
    max_episodes: 100000
    validation_stopping: True
    seed_numpy: 0
    seed_torch: 2
